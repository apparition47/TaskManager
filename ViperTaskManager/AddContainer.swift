//
//  AddContainer.swift
//  ViperTaskManager
//
//  Created by Aaron Lee on 19/02/16.
//  Copyright Â© 2016 One Fat Giraffe. All rights reserved.
//
//  Generated by Swift-Viper templates. Find latest version at https://github.com/Nikita2k/SwiftViper
//

import UIKit
import Swinject

class AddContainer: Assembly {
    func assemble(container: Container) {
        container.storyboardInitCompleted(AddTableViewController.self) { (r, c) -> () in
            container.register(AddPresenterProtocol.self) { [weak c] r in
                guard let c = c else { fatalError("Controller is nil") }
                
                let interface = c
                let interactor = r.resolve(AddInteractorInputProtocol.self)!
                let router = r.resolve(AddRouterInputProtocol.self)!
                
                let presenter = AddPresenter(interface: interface, interactor: interactor, router: router)
                interactor.presenter = presenter
                
                return presenter
            }
            c.presenter = r.resolve(AddPresenterProtocol.self)
        }
        
        container.register(AddInteractorInputProtocol.self) { r in
            let interactor = AddInteractor()
            let dataManager = r.resolve(AddDataManagerInputProtocol.self)!
            interactor.dataManager = dataManager
            dataManager.interactor = interactor
            return interactor
        }
        
        container.register(AddRouterInputProtocol.self) { (r) in
            let router = AddRouter()
            router.detailAssembler = r.resolve(DetailAssembler.self)!
            return router
        }
        
        container.register(AddDataManagerInputProtocol.self) { (r) in
            let dataManager = AddDataManager()
            return dataManager
        }
        
        container.register(DetailAssembler.self) { r in
            let parentAssembler = r.resolve(AddAssembler.self)!.assembler
            return DetailAssembler(parentAssembler: parentAssembler)
        }
    }
}
