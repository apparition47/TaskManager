//
//  AddInteractor.swift
//  ViperTaskManager
//
//  Created by Aaron Lee on 19/02/16.
//  Copyright Â© 2016 One Fat Giraffe. All rights reserved.
//
//  Generated by Swift-Viper templates. Find latest version at https://github.com/Nikita2k/SwiftViper
//

import Foundation


protocol AddInteractorInputProtocol: class {
    
    weak var presenter: AddInteractorOutputProtocol! { get set }

//    func getCitiesWithName(name: String)
//    func saveProject(project: Project)
    func updateProject(project: Project, callback: (result: Project?, error: NSError?) -> ())
}

protocol AddInteractorOutputProtocol: class {
   
//    func foundCities(tasks: [Task])
}

class AddInteractor {

    weak var presenter: AddInteractorOutputProtocol!
    
    var dataManager: AddDataManagerInputProtocol!
}

extension AddInteractor: AddInteractorInputProtocol {
    
//    func getCitiesWithName(name: String) {
//        self.dataManager.fetchCitiesWithName(name) { [weak self] (tasks) -> () in
//            self?.presenter.foundCities(tasks)
//        }
//    }
    
    func saveTask(task: Task) {
        self.dataManager.saveTaskToPersistentStore(task)
    }
    
    func updateProject(project: Project, callback: (result: Project?, error: NSError?) -> ()) {
        self.dataManager.updateProject(project) { (result, error) in
            callback(result: result, error: error)
        }
    }
}

extension AddInteractor: AddDataManagerOutputProtocol {
    
}
