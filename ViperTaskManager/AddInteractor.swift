//
//  AddInteractor.swift
//  ViperTaskManager
//
//  Created by Aaron Lee on 19/02/16.
//  Copyright Â© 2016 One Fat Giraffe. All rights reserved.
//
//  Generated by Swift-Viper templates. Find latest version at https://github.com/Nikita2k/SwiftViper
//

import Foundation


protocol AddInteractorInputProtocol: class {
    
    weak var presenter: AddInteractorOutputProtocol! { get set }

    func fetchTasks(projectId: String, callback: (result: [Task]?) -> ())
//    func saveProject(project: Project)
    func updateProject(project: Project, callback: (result: Project?, error: NSError?) -> ())
    func updateProjectInPersistentStore(project: Project)
    func fetchSortBy(projectId: String, callback: (result: String) -> ())
    func createTask(projectId: String, title: String, callback: (result: Task?, error: NSError?) -> ())
    func removeTask(task: Task, callback: (error: NSError?) -> ())
}

protocol AddInteractorOutputProtocol: class {
   
}

class AddInteractor {

    weak var presenter: AddInteractorOutputProtocol!
    
    var dataManager: AddDataManagerInputProtocol!
}

extension AddInteractor: AddInteractorInputProtocol {

    func fetchTasks(projectId: String, callback: (result: [Task]?) -> ()) {
        self.dataManager.fetchTasks(projectId) { (result, error) in
            if (error == nil) {
                callback(result: result)
            } else {
                self.dataManager.fetchProjectFromPersistentStore(projectId, callback: { (result) in
                    callback(result: result.tasks)
                })
            }
        }
    }
    
    func saveTask(task: Task) {
        self.dataManager.saveTaskToPersistentStore(task)
    }
    
    func updateProject(project: Project, callback: (result: Project?, error: NSError?) -> ()) {
        self.dataManager.updateProject(project) { (result, error) in
            if (error == nil) {
                self.dataManager.updateProjectInPersistentStore(project)
            }
            
            callback(result: result, error: error)
        }
    }
    
    func updateProjectInPersistentStore(project: Project) {
        self.dataManager.updateProjectInPersistentStore(project)
    }
    
    func fetchSortBy(projectId: String, callback: (result: String) -> ()) {
        self.dataManager.fetchProjectFromPersistentStore(projectId) { result in
            callback(result: result.sortBy)
        }
    }
    
    func createTask(projectId: String, title: String, callback: (result: Task?, error: NSError?) -> ()) {
        self.dataManager.createTask(projectId, title: title) { (result, error) in
            if (error == nil) {
                self.dataManager.saveTaskToPersistentStore(result!)
            }
            callback(result: result, error: error)
        }
    }
    
    func removeTask(task: Task, callback: (error: NSError?) -> ()) {
        self.dataManager.removeTask(task) { (error) in
            callback(error: error)
        }
    }
}

extension AddInteractor: AddDataManagerOutputProtocol {
    
}
