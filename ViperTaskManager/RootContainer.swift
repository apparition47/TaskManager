//
//  RootContainer.swift
//  ViperTaskManager
//
//  Created by Aaron Lee on 20/02/16.
//  Copyright Â© 2016 One Fat Giraffe. All rights reserved.
//
//  Generated by Swift-Viper templates. Find latest version at https://github.com/Nikita2k/SwiftViper
//

import UIKit
import Swinject

class RootContainer: AssemblyType {
    
    func assemble(container: Container) {
        container.registerForStoryboard(RootViewController.self) { (r, c) -> () in
            container.register(RootPresenterProtocol.self) { [weak c] r in
                guard let c = c else { fatalError("Contoller is nil") }

                let interface = c
                let interactor = r.resolve(RootInteractorInputProtocol.self)!
                let router = r.resolve(RootRouterInputProtocol.self)!
                
                let presenter = RootPresenter(interface: interface, interactor: interactor, router: router)
                interactor.presenter = presenter
                
                return presenter
            }
            c.presenter = r.resolve(RootPresenterProtocol.self)
        }

        container.register(RootInteractorInputProtocol.self) { r in
            return RootInteractor()
        }
        
        container.register(RootRouterInputProtocol.self) { r in
            let router = RootRouter()
            router.listAssembler = r.resolve(ListAssembler.self)!
            return router
        }
        
        container.register(ListAssembler.self) { r in
            let parentAssembler = r.resolve(RootAssembler.self)!
            return ListAssembler(parentAssembler: parentAssembler)
        }
    }
    
}
