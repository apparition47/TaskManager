//
//  AddPresenter.swift
//  ViperTaskManager
//
//  Created by Aaron Lee on 19/02/16.
//  Copyright Â© 2016 One Fat Giraffe. All rights reserved.
//
//  Generated by Swift-Viper templates. Find latest version at https://github.com/Nikita2k/SwiftViper
//

import UIKit


protocol AddViewControllerDelegate: class {
    
    func addViewControllerDidSelectProject(project: Project)
}

protocol AddPresenterProtocol: class {

    weak var delegate: AddViewControllerDelegate? { get set }
    
    func done()
//    func getCitiesWithName(name: String?)
    func selectTask(task: Task)
    func createTask(projectId: Int, callback: ([Task]) -> ())
    func updateProject(project: Project, callback: (result: Project?, error: NSError?) -> ())
    func updateProjectInPersistentStore(project: Project)
    func fetchSortBy(projectId: String, callback: (result: String) -> ())
}

protocol AddInterfaceProtocol: class {
    
    var presenter: AddPresenterProtocol!  { get set }
    
//    func showEmpty()
//    func showProjects(projects: [Project])
}

class AddPresenter {

	weak private var interface: AddInterfaceProtocol!
	private let interactor: AddInteractorInputProtocol
    private let router: AddRouterInputProtocol

    weak var delegate: AddViewControllerDelegate?

    
    init(interface: AddInterfaceProtocol, interactor: AddInteractorInputProtocol, router: AddRouterInputProtocol) {
        self.interface = interface
        self.interactor = interactor
        self.router = router
    }
}

extension AddPresenter: AddPresenterProtocol {
    
    func done() {
        self.router.closeAddViewController(viewController: self.interface as! UIViewController)
    }
    
//    func getCitiesWithName(name: String?) {
//        guard let name = name else {
//            self.interface.showEmpty()
//            return
//        }
//        guard name.isEmpty != true else {
//            self.interface.showEmpty()
//            return
//        }
//        self.interactor.getCitiesWithName(name)
//    }
    
    func selectTask(task: Task) {
//        self.delegate?.addViewControllerDidSelectTask(task)
        self.router.closeAddViewController(viewController: interface as! UIViewController)
    }
    
    func createTask(projectId: Int, callback: ([Task]) -> ()) {
//        self.delegate?.addViewControllerDidSelectTask(task)
        self.router.closeAddViewController(viewController: interface as! UIViewController)
    }
    
    func updateProject(project: Project, callback: (result: Project?, error: NSError?) -> ()) {
        self.interactor.updateProject(project) { (result, error) in
            callback(result: result, error: error)
        }
    }
    
    func updateProjectInPersistentStore(project: Project) {
        self.interactor.updateProjectInPersistentStore(project)
    }
    
    func fetchSortBy(projectId: String, callback: (result: String) -> ()) {
        self.interactor.fetchSortBy(projectId) { (result) in
            callback(result: result)
        }
    }
}

extension AddPresenter: AddInteractorOutputProtocol {
    
//    func foundProjects(projects: [Project]) {
//        self.interface.showProjects(projects)
//    }
}
